-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sigmoid_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of sigmoid_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sigmoid_top_sigmoid_top,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325t-ffg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.296583,HLS_SYN_LAT=10,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=556,HLS_SYN_LUT=1527,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_4003000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000011000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_4FFF : STD_LOGIC_VECTOR (15 downto 0) := "0100111111111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FFCB : STD_LOGIC_VECTOR (15 downto 0) := "1111111111001011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_3600 : STD_LOGIC_VECTOR (14 downto 0) := "011011000000000";
    constant ap_const_lv16_2800 : STD_LOGIC_VECTOR (15 downto 0) := "0010100000000000";
    constant ap_const_lv16_2000 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv16_4000 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv17_4000 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv29_1715 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001011100010101";
    constant ap_const_lv20_B17 : STD_LOGIC_VECTOR (19 downto 0) := "00000000101100010111";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ROM_EXP_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ROM_EXP_V_ce0 : STD_LOGIC;
    signal ROM_EXP_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_read_reg_841 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal in_read_reg_841_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1549_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_reg_848 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_reg_848_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_reg_848_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_reg_848_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_reg_848_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_reg_848_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln961_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln961_reg_854 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln961_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln961_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln962_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln962_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal tobool29_i_i647_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool29_i_i647_reg_869 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln946_fu_366_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln946_reg_874 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1549_1_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_1_reg_879 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1549_1_reg_879_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_884 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_reg_884_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_reg_889 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_reg_889_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln1560_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1560_reg_904 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1560_1_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1560_1_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal x0_V_4_fu_653_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x0_V_4_reg_914 : STD_LOGIC_VECTOR (15 downto 0);
    signal x0_V_4_reg_914_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal x0_V_4_reg_914_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal x0_V_4_reg_914_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_813_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_reg_919 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_reg_919_pp0_iter4_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_reg_919_pp0_iter5_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_reg_919_pp0_iter6_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_reg_919_pp0_iter7_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_reg_919_pp0_iter8_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal n_reg_924 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_reg_924_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1352_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1352_fu_724_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln1352_reg_955 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln1352_reg_955_pp0_iter7_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln1352_reg_955_pp0_iter8_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln1352_reg_955_pp0_iter9_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_835_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_6_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal ret_V_1_fu_764_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_reg_965 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln573_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_191_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_202_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_fu_212_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_220_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln947_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_244_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln950_fu_260_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln950_fu_264_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln950_fu_270_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln950_fu_274_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_2_fu_280_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_292_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln950_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln947_fu_234_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln952_fu_312_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln952_fu_318_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln952_fu_324_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_3_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln952_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_370_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln960_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln962_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln961_fu_416_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln962_fu_425_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_431_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln964_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_441_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_447_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_4_fu_461_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln968_fu_477_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln946_fu_469_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln968_fu_482_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln965_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_488_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_7_fu_496_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_513_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln1560_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1560_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_556_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln712_fu_563_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal x0_V_fu_567_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal and_ln712_1_fu_577_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln712_1_fu_584_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln712_fu_594_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_599_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln938_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln938_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1560_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1560_1_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x0_V_2_fu_609_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln6_fu_573_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln938_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1549_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1549_1_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x0_V_1_fu_588_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x0_V_3_fu_628_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_fu_661_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_1_fu_670_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_1_fu_670_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_fu_693_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_821_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln4_fu_693_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1246_fu_702_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_fu_706_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal x0_V_6_fu_687_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_828_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal m_4_fu_728_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1168_3_fu_737_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln1386_fu_740_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal r_fu_744_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal exp_negx_V_fu_750_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1245_fu_760_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1246_fu_776_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_782_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal mul_ln1246_fu_776_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal ret_V_2_fu_789_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_6_fu_795_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_813_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_813_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_821_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_821_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_828_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_828_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_835_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_835_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_813_p00 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_821_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_828_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_828_p10 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln1246_fu_776_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component sigmoid_top_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sigmoid_top_mul_17s_32ns_43_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component sigmoid_top_mul_mul_16ns_13ns_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component sigmoid_top_mul_mul_8ns_12ns_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component sigmoid_top_mul_mul_15ns_15ns_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component sigmoid_top_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sigmoid_top_ROM_EXP_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    ROM_EXP_V_U : component sigmoid_top_ROM_EXP_V
    generic map (
        DataWidth => 15,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ROM_EXP_V_address0,
        ce0 => ROM_EXP_V_ce0,
        q0 => ROM_EXP_V_q0);

    dcmp_64ns_64ns_1_2_no_dsp_1_U1 : component sigmoid_top_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_191_p0,
        din1 => ap_const_lv64_4003000000000000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_191_p2);

    mul_17s_32ns_43_1_1_U2 : component sigmoid_top_mul_17s_32ns_43_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 32,
        dout_WIDTH => 43)
    port map (
        din0 => ret_V_1_reg_965,
        din1 => mul_ln1246_fu_776_p1,
        dout => mul_ln1246_fu_776_p2);

    mul_mul_16ns_13ns_29_4_1_U3 : component sigmoid_top_mul_mul_16ns_13ns_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_813_p0,
        din1 => grp_fu_813_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_813_p2);

    mul_mul_8ns_12ns_20_4_1_U4 : component sigmoid_top_mul_mul_8ns_12ns_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_821_p0,
        din1 => grp_fu_821_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_821_p2);

    mul_mul_15ns_15ns_30_4_1_U5 : component sigmoid_top_mul_mul_15ns_15ns_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_828_p0,
        din1 => grp_fu_828_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_828_p2);

    mul_mul_16ns_16ns_32_4_1_U6 : component sigmoid_top_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_835_p0,
        din1 => grp_fu_835_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_835_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln961_reg_859 <= add_ln961_fu_348_p2;
                icmp_ln1549_1_reg_879 <= icmp_ln1549_1_fu_380_p2;
                icmp_ln1549_1_reg_879_pp0_iter1_reg <= icmp_ln1549_1_reg_879;
                icmp_ln1549_reg_848 <= icmp_ln1549_fu_196_p2;
                icmp_ln1549_reg_848_pp0_iter1_reg <= icmp_ln1549_reg_848;
                icmp_ln961_reg_854 <= icmp_ln961_fu_342_p2;
                in_read_reg_841 <= in_r;
                in_read_reg_841_pp0_iter1_reg <= in_read_reg_841;
                sub_ln962_reg_864 <= sub_ln962_fu_354_p2;
                tmp_2_reg_884 <= in_r(15 downto 5);
                tmp_2_reg_884_pp0_iter1_reg <= tmp_2_reg_884;
                tmp_3_reg_889 <= in_r(15 downto 3);
                tmp_3_reg_889_pp0_iter1_reg <= tmp_3_reg_889;
                tobool29_i_i647_reg_869 <= tobool29_i_i647_fu_360_p2;
                trunc_ln946_reg_874 <= trunc_ln946_fu_366_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln1549_reg_848_pp0_iter2_reg <= icmp_ln1549_reg_848_pp0_iter1_reg;
                icmp_ln1549_reg_848_pp0_iter3_reg <= icmp_ln1549_reg_848_pp0_iter2_reg;
                icmp_ln1549_reg_848_pp0_iter4_reg <= icmp_ln1549_reg_848_pp0_iter3_reg;
                icmp_ln1549_reg_848_pp0_iter5_reg <= icmp_ln1549_reg_848_pp0_iter4_reg;
                n_reg_924 <= n_fu_661_p1(23 downto 20);
                n_reg_924_pp0_iter4_reg <= n_reg_924;
                r_V_6_reg_960 <= grp_fu_835_p2;
                r_V_reg_919 <= grp_fu_813_p2;
                r_V_reg_919_pp0_iter4_reg <= r_V_reg_919;
                r_V_reg_919_pp0_iter5_reg <= r_V_reg_919_pp0_iter4_reg;
                r_V_reg_919_pp0_iter6_reg <= r_V_reg_919_pp0_iter5_reg;
                r_V_reg_919_pp0_iter7_reg <= r_V_reg_919_pp0_iter6_reg;
                r_V_reg_919_pp0_iter8_reg <= r_V_reg_919_pp0_iter7_reg;
                ret_V_1_reg_965 <= ret_V_1_fu_764_p2;
                    trunc_ln1352_reg_955(13 downto 2) <= trunc_ln1352_fu_724_p1(13 downto 2);
                    trunc_ln1352_reg_955_pp0_iter7_reg(13 downto 2) <= trunc_ln1352_reg_955(13 downto 2);
                    trunc_ln1352_reg_955_pp0_iter8_reg(13 downto 2) <= trunc_ln1352_reg_955_pp0_iter7_reg(13 downto 2);
                    trunc_ln1352_reg_955_pp0_iter9_reg(13 downto 2) <= trunc_ln1352_reg_955_pp0_iter8_reg(13 downto 2);
                    x0_V_4_reg_914_pp0_iter3_reg(15 downto 2) <= x0_V_4_reg_914(15 downto 2);
                    x0_V_4_reg_914_pp0_iter4_reg(15 downto 2) <= x0_V_4_reg_914_pp0_iter3_reg(15 downto 2);
                    x0_V_4_reg_914_pp0_iter5_reg(15 downto 2) <= x0_V_4_reg_914_pp0_iter4_reg(15 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1549_reg_848 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1560_1_reg_909 <= icmp_ln1560_1_fu_529_p2;
                icmp_ln1560_reg_904 <= icmp_ln1560_fu_523_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1549_reg_848_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    x0_V_4_reg_914(15 downto 2) <= x0_V_4_fu_653_p3(15 downto 2);
            end if;
        end if;
    end process;
    x0_V_4_reg_914(1 downto 0) <= "00";
    x0_V_4_reg_914_pp0_iter3_reg(1 downto 0) <= "00";
    x0_V_4_reg_914_pp0_iter4_reg(1 downto 0) <= "00";
    x0_V_4_reg_914_pp0_iter5_reg(1 downto 0) <= "00";
    trunc_ln1352_reg_955(1 downto 0) <= "00";
    trunc_ln1352_reg_955_pp0_iter7_reg(1 downto 0) <= "00";
    trunc_ln1352_reg_955_pp0_iter8_reg(1 downto 0) <= "00";
    trunc_ln1352_reg_955_pp0_iter9_reg(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ROM_EXP_V_address0 <= zext_ln573_fu_683_p1(4 - 1 downto 0);

    ROM_EXP_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ROM_EXP_V_ce0 <= ap_const_logic_1;
        else 
            ROM_EXP_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    a_fu_336_p2 <= (p_Result_3_fu_330_p2 or and_ln949_fu_306_p2);
    add_ln712_fu_594_p2 <= std_logic_vector(unsigned(in_read_reg_841_pp0_iter1_reg) + unsigned(ap_const_lv16_2000));
    add_ln952_fu_312_p2 <= std_logic_vector(unsigned(trunc_ln947_fu_234_p1) + unsigned(ap_const_lv16_FFCB));
    add_ln961_fu_348_p2 <= std_logic_vector(unsigned(sub_ln947_fu_228_p2) + unsigned(ap_const_lv32_FFFFFFCA));
    add_ln968_fu_482_p2 <= std_logic_vector(unsigned(sub_ln968_fu_477_p2) + unsigned(select_ln946_fu_469_p3));
    and_ln1549_1_fu_647_p2 <= (xor_ln1560_fu_550_p2 and and_ln1549_fu_642_p2);
    and_ln1549_fu_642_p2 <= (xor_ln938_fu_636_p2 and icmp_ln1549_1_reg_879_pp0_iter1_reg);
    and_ln1560_fu_544_p2 <= (or_ln1560_fu_540_p2 and grp_fu_191_p2);
    and_ln712_1_fu_577_p3 <= (tmp_3_reg_889_pp0_iter1_reg & ap_const_lv2_0);
    and_ln949_fu_306_p2 <= (icmp_ln950_fu_286_p2 and icmp_ln949_fu_254_p2);
    and_ln952_fu_324_p2 <= (shl_ln952_fu_318_p2 and in_r);
    and_ln_fu_556_p3 <= (tmp_2_reg_884_pp0_iter1_reg & ap_const_lv2_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to9)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (tmp_6_fu_795_p4 & ap_const_lv1_0);
    exp_negx_V_fu_750_p4 <= r_fu_744_p2(29 downto 14);
    grp_fu_191_p0 <= p_Result_7_fu_496_p5;
    grp_fu_813_p0 <= grp_fu_813_p00(16 - 1 downto 0);
    grp_fu_813_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_r),29));
    grp_fu_813_p1 <= ap_const_lv29_1715(13 - 1 downto 0);
    grp_fu_821_p0 <= grp_fu_821_p00(8 - 1 downto 0);
    grp_fu_821_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_1_fu_670_p4),20));
    grp_fu_821_p1 <= ap_const_lv20_B17(12 - 1 downto 0);
    grp_fu_828_p0 <= grp_fu_828_p00(15 - 1 downto 0);
    grp_fu_828_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_706_p2),30));
    grp_fu_828_p1 <= grp_fu_828_p10(15 - 1 downto 0);
    grp_fu_828_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ROM_EXP_V_q0),30));
    grp_fu_835_p0 <= zext_ln1352_fu_720_p1(16 - 1 downto 0);
    grp_fu_835_p1 <= zext_ln1352_fu_720_p1(16 - 1 downto 0);
    icmp_ln1549_1_fu_380_p2 <= "0" when (tmp_9_fu_370_p4 = ap_const_lv4_0) else "1";
    icmp_ln1549_fu_196_p2 <= "1" when (unsigned(in_r) > unsigned(ap_const_lv16_4FFF)) else "0";
    icmp_ln1560_1_fu_529_p2 <= "1" when (trunc_ln3_fu_513_p4 = ap_const_lv52_0) else "0";
    icmp_ln1560_fu_523_p2 <= "0" when (add_ln968_fu_482_p2 = ap_const_lv11_7FF) else "1";
    icmp_ln938_fu_535_p2 <= "1" when (in_read_reg_841_pp0_iter1_reg = ap_const_lv16_0) else "0";
    icmp_ln949_fu_254_p2 <= "1" when (signed(tmp_5_fu_244_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln950_fu_286_p2 <= "0" when (p_Result_2_fu_280_p2 = ap_const_lv16_0) else "1";
    icmp_ln961_fu_342_p2 <= "1" when (signed(lsb_index_fu_238_p2) > signed(ap_const_lv32_0)) else "0";
    
    l_fu_220_p3_proc : process(p_Result_6_fu_212_p3)
    begin
        l_fu_220_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_6_fu_212_p3(i) = '1' then
                l_fu_220_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lhs_V_fu_782_p3 <= (trunc_ln1352_reg_955_pp0_iter9_reg & ap_const_lv29_0);
    lsb_index_fu_238_p2 <= std_logic_vector(unsigned(sub_ln947_fu_228_p2) + unsigned(ap_const_lv32_FFFFFFCB));
    lshr_ln950_fu_274_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln950_fu_270_p1(16-1 downto 0)))));
    lshr_ln961_fu_416_p2 <= std_logic_vector(shift_right(unsigned(zext_ln960_fu_410_p1),to_integer(unsigned('0' & zext_ln961_fu_413_p1(31-1 downto 0)))));
    m_1_fu_441_p2 <= std_logic_vector(unsigned(m_fu_431_p3) + unsigned(zext_ln964_fu_438_p1));
    m_4_fu_728_p4 <= r_V_reg_919_pp0_iter8_reg(27 downto 24);
    m_5_fu_447_p4 <= m_1_fu_441_p2(63 downto 1);
    m_fu_431_p3 <= 
        lshr_ln961_fu_416_p2 when (icmp_ln961_reg_854(0) = '1') else 
        shl_ln962_fu_425_p2;
    mul_ln1246_fu_776_p1 <= mul_ln1246_fu_776_p10(32 - 1 downto 0);
    mul_ln1246_fu_776_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_6_reg_960),43));
    n_fu_661_p1 <= grp_fu_813_p2;
    or_ln1560_1_fu_622_p2 <= (xor_ln1560_fu_550_p2 or or_ln938_fu_617_p2);
    or_ln1560_fu_540_p2 <= (icmp_ln1560_reg_904 or icmp_ln1560_1_reg_909);
    or_ln938_fu_617_p2 <= (icmp_ln938_fu_535_p2 or icmp_ln1549_reg_848_pp0_iter1_reg);
    p_Result_2_fu_280_p2 <= (lshr_ln950_fu_274_p2 and in_r);
    p_Result_3_fu_330_p2 <= "0" when (and_ln952_fu_324_p2 = ap_const_lv16_0) else "1";
    p_Result_4_fu_461_p3 <= m_1_fu_441_p2(54 downto 54);
    p_Result_6_fu_212_p3 <= (ap_const_lv16_FFFF & p_Result_s_fu_202_p4);
    p_Result_7_fu_496_p5 <= (tmp_fu_488_p3 & zext_ln965_fu_457_p1(51 downto 0));
    
    p_Result_s_fu_202_p4_proc : process(in_r)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_s_fu_202_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := in_r;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_s_fu_202_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_s_fu_202_p4_i) := in_r(16-1-p_Result_s_fu_202_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_202_p4 <= resvalue(16-1 downto 0);
    end process;

    r_V_1_fu_670_p1 <= grp_fu_813_p2;
    r_V_1_fu_670_p4 <= r_V_1_fu_670_p1(19 downto 12);
    r_fu_744_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1168_3_fu_737_p1),to_integer(unsigned('0' & zext_ln1386_fu_740_p1(31-1 downto 0)))));
    ret_V_1_fu_764_p2 <= std_logic_vector(signed(sext_ln1245_fu_760_p1) + signed(ap_const_lv17_4000));
    ret_V_2_fu_789_p2 <= std_logic_vector(unsigned(lhs_V_fu_782_p3) - unsigned(mul_ln1246_fu_776_p2));
    ret_V_fu_706_p2 <= std_logic_vector(signed(ap_const_lv15_4000) - signed(zext_ln1246_fu_702_p1));
    select_ln946_fu_469_p3 <= 
        ap_const_lv11_3FF when (p_Result_4_fu_461_p3(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1245_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(exp_negx_V_fu_750_p4),17));

    shl_ln952_fu_318_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_1),to_integer(unsigned('0' & add_ln952_fu_312_p2(16-1 downto 0)))));
    shl_ln962_fu_425_p2 <= std_logic_vector(shift_left(unsigned(zext_ln960_fu_410_p1),to_integer(unsigned('0' & zext_ln962_fu_422_p1(31-1 downto 0)))));
    sub_ln947_fu_228_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_fu_220_p3));
    sub_ln950_fu_264_p2 <= std_logic_vector(unsigned(ap_const_lv5_6) - unsigned(trunc_ln950_fu_260_p1));
    sub_ln962_fu_354_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln947_fu_228_p2));
    sub_ln968_fu_477_p2 <= std_logic_vector(unsigned(ap_const_lv11_4) - unsigned(trunc_ln946_reg_874));
    tmp_4_fu_599_p4 <= add_ln712_fu_594_p2(15 downto 2);
    tmp_5_fu_244_p4 <= lsb_index_fu_238_p2(31 downto 1);
    tmp_6_fu_795_p4 <= ret_V_2_fu_789_p2(42 downto 28);
    tmp_7_fu_292_p3 <= lsb_index_fu_238_p2(31 downto 31);
    tmp_9_fu_370_p4 <= in_r(15 downto 12);
    tmp_fu_488_p3 <= (ap_const_lv1_0 & add_ln968_fu_482_p2);
    tobool29_i_i647_fu_360_p2 <= (xor_ln952_fu_300_p2 and a_fu_336_p2);
    trunc_ln1352_fu_724_p1 <= x0_V_6_fu_687_p3(14 - 1 downto 0);
    trunc_ln3_fu_513_p4 <= m_1_fu_441_p2(52 downto 1);
    trunc_ln4_fu_693_p1 <= grp_fu_821_p2;
    trunc_ln4_fu_693_p4 <= trunc_ln4_fu_693_p1(19 downto 10);
    trunc_ln946_fu_366_p1 <= l_fu_220_p3(11 - 1 downto 0);
    trunc_ln947_fu_234_p1 <= sub_ln947_fu_228_p2(16 - 1 downto 0);
    trunc_ln950_fu_260_p1 <= sub_ln947_fu_228_p2(5 - 1 downto 0);
    x0_V_1_fu_588_p2 <= std_logic_vector(unsigned(zext_ln712_1_fu_584_p1) + unsigned(ap_const_lv16_2800));
    x0_V_2_fu_609_p3 <= (tmp_4_fu_599_p4 & ap_const_lv2_0);
    x0_V_3_fu_628_p3 <= 
        x0_V_2_fu_609_p3 when (or_ln1560_1_fu_622_p2(0) = '1') else 
        zext_ln6_fu_573_p1;
    x0_V_4_fu_653_p3 <= 
        x0_V_1_fu_588_p2 when (and_ln1549_1_fu_647_p2(0) = '1') else 
        x0_V_3_fu_628_p3;
    x0_V_6_fu_687_p3 <= 
        ap_const_lv16_4000 when (icmp_ln1549_reg_848_pp0_iter5_reg(0) = '1') else 
        x0_V_4_reg_914_pp0_iter5_reg;
    x0_V_fu_567_p2 <= std_logic_vector(unsigned(zext_ln712_fu_563_p1) + unsigned(ap_const_lv15_3600));
    xor_ln1560_fu_550_p2 <= (ap_const_lv1_1 xor and_ln1560_fu_544_p2);
    xor_ln938_fu_636_p2 <= (or_ln938_fu_617_p2 xor ap_const_lv1_1);
    xor_ln952_fu_300_p2 <= (tmp_7_fu_292_p3 xor ap_const_lv1_1);
    zext_ln1168_3_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_828_p2),63));
    zext_ln1246_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln4_fu_693_p4),15));
    zext_ln1352_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x0_V_6_fu_687_p3),32));
    zext_ln1386_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_4_fu_728_p4),63));
    zext_ln573_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_reg_924_pp0_iter4_reg),64));
    zext_ln6_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x0_V_fu_567_p2),16));
    zext_ln712_1_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln712_1_fu_577_p3),16));
    zext_ln712_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_556_p3),15));
    zext_ln950_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln950_fu_264_p2),16));
    zext_ln960_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_read_reg_841),64));
    zext_ln961_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln961_reg_859),64));
    zext_ln962_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln962_reg_864),64));
    zext_ln964_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tobool29_i_i647_reg_869),64));
    zext_ln965_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_fu_447_p4),64));
end behav;
