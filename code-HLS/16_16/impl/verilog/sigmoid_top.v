// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sigmoid_top_sigmoid_top,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325t-ffg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.296583,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=239,HLS_SYN_LUT=1446,HLS_VERSION=2021_1}" *)

module sigmoid_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r,
        ap_return
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_r;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] ROM_EXP_V_address0;
reg    ROM_EXP_V_ce0;
wire   [14:0] ROM_EXP_V_q0;
wire   [0:0] icmp_ln1549_fu_192_p2;
reg   [0:0] icmp_ln1549_reg_844;
wire   [0:0] icmp_ln961_fu_338_p2;
reg   [0:0] icmp_ln961_reg_850;
wire   [31:0] add_ln961_fu_344_p2;
reg   [31:0] add_ln961_reg_855;
wire   [31:0] sub_ln962_fu_350_p2;
reg   [31:0] sub_ln962_reg_860;
wire   [0:0] tobool29_i_i647_fu_356_p2;
reg   [0:0] tobool29_i_i647_reg_865;
wire   [10:0] trunc_ln946_fu_362_p1;
reg   [10:0] trunc_ln946_reg_870;
wire   [0:0] icmp_ln1549_1_fu_376_p2;
reg   [0:0] icmp_ln1549_1_reg_875;
reg   [10:0] tmp_1_reg_880;
reg   [12:0] tmp_3_reg_885;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln1560_fu_519_p2;
reg   [0:0] icmp_ln1560_reg_900;
wire   [0:0] icmp_ln1560_1_fu_525_p2;
reg   [0:0] icmp_ln1560_1_reg_905;
wire   [15:0] x0_V_4_fu_649_p3;
reg   [15:0] x0_V_4_reg_910;
wire    ap_CS_fsm_state3;
wire  signed [28:0] grp_fu_809_p2;
reg   [28:0] r_V_reg_915;
wire    ap_CS_fsm_state4;
reg   [3:0] n_reg_920;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [31:0] zext_ln1352_fu_716_p1;
wire   [13:0] trunc_ln1352_fu_720_p1;
reg   [13:0] trunc_ln1352_reg_951;
wire   [31:0] grp_fu_831_p2;
reg   [31:0] r_V_6_reg_956;
wire    ap_CS_fsm_state10;
wire   [16:0] ret_V_1_fu_760_p2;
reg  signed [16:0] ret_V_1_reg_961;
wire   [63:0] zext_ln573_fu_679_p1;
wire   [63:0] grp_fu_187_p0;
reg   [15:0] p_Result_s_fu_198_p4;
wire   [31:0] p_Result_6_fu_208_p3;
reg   [31:0] l_fu_216_p3;
wire   [31:0] sub_ln947_fu_224_p2;
wire   [31:0] lsb_index_fu_234_p2;
wire   [30:0] tmp_5_fu_240_p4;
wire   [4:0] trunc_ln950_fu_256_p1;
wire   [4:0] sub_ln950_fu_260_p2;
wire   [15:0] zext_ln950_fu_266_p1;
wire   [15:0] lshr_ln950_fu_270_p2;
wire   [15:0] p_Result_2_fu_276_p2;
wire   [0:0] tmp_7_fu_288_p3;
wire   [0:0] icmp_ln949_fu_250_p2;
wire   [0:0] icmp_ln950_fu_282_p2;
wire   [15:0] trunc_ln947_fu_230_p1;
wire   [15:0] add_ln952_fu_308_p2;
wire   [15:0] shl_ln952_fu_314_p2;
wire   [15:0] and_ln952_fu_320_p2;
wire   [0:0] p_Result_3_fu_326_p2;
wire   [0:0] and_ln949_fu_302_p2;
wire   [0:0] a_fu_332_p2;
wire   [0:0] xor_ln952_fu_296_p2;
wire   [3:0] tmp_9_fu_366_p4;
wire   [63:0] zext_ln960_fu_406_p1;
wire   [63:0] zext_ln961_fu_409_p1;
wire   [63:0] zext_ln962_fu_418_p1;
wire   [63:0] lshr_ln961_fu_412_p2;
wire   [63:0] shl_ln962_fu_421_p2;
wire   [63:0] m_fu_427_p3;
wire   [63:0] zext_ln964_fu_434_p1;
wire   [63:0] m_1_fu_437_p2;
wire   [62:0] m_5_fu_443_p4;
wire   [0:0] p_Result_4_fu_457_p3;
wire   [10:0] sub_ln968_fu_473_p2;
wire   [10:0] select_ln946_fu_465_p3;
wire   [10:0] add_ln968_fu_478_p2;
wire   [63:0] zext_ln965_fu_453_p1;
wire   [11:0] tmp_fu_484_p3;
wire   [63:0] p_Result_7_fu_492_p5;
wire   [51:0] trunc_ln3_fu_509_p4;
wire   [0:0] or_ln1560_fu_536_p2;
wire   [0:0] grp_fu_187_p2;
wire   [0:0] and_ln1560_fu_540_p2;
wire   [12:0] and_ln_fu_552_p3;
wire   [14:0] zext_ln712_fu_559_p1;
wire   [14:0] x0_V_fu_563_p2;
wire   [14:0] and_ln712_1_fu_573_p3;
wire   [15:0] zext_ln712_1_fu_580_p1;
wire   [15:0] add_ln712_fu_590_p2;
wire   [13:0] tmp_4_fu_595_p4;
wire   [0:0] icmp_ln938_fu_531_p2;
wire   [0:0] or_ln938_fu_613_p2;
wire   [0:0] xor_ln1560_fu_546_p2;
wire   [0:0] or_ln1560_1_fu_618_p2;
wire   [15:0] x0_V_2_fu_605_p3;
wire   [15:0] zext_ln5_fu_569_p1;
wire   [0:0] xor_ln938_fu_632_p2;
wire   [0:0] and_ln1549_fu_638_p2;
wire   [0:0] and_ln1549_1_fu_643_p2;
wire   [15:0] x0_V_1_fu_584_p2;
wire   [15:0] x0_V_3_fu_624_p3;
wire   [28:0] n_fu_657_p1;
wire   [28:0] r_V_1_fu_666_p1;
wire   [7:0] r_V_1_fu_666_p4;
wire   [19:0] trunc_ln4_fu_689_p1;
wire  signed [19:0] grp_fu_817_p2;
wire   [9:0] trunc_ln4_fu_689_p4;
wire   [14:0] zext_ln1246_fu_698_p1;
wire   [14:0] ret_V_fu_702_p2;
wire   [15:0] x0_V_6_fu_683_p3;
wire   [29:0] grp_fu_824_p2;
wire   [3:0] m_4_fu_724_p4;
wire   [62:0] zext_ln1168_3_fu_733_p1;
wire   [62:0] zext_ln1386_fu_736_p1;
wire   [62:0] r_fu_740_p2;
wire   [15:0] exp_negx_V_fu_746_p4;
wire  signed [16:0] sext_ln1245_fu_756_p1;
wire    ap_CS_fsm_state11;
wire   [31:0] mul_ln1246_fu_772_p1;
wire   [42:0] lhs_V_fu_778_p3;
wire   [42:0] mul_ln1246_fu_772_p2;
wire   [42:0] ret_V_2_fu_785_p2;
wire   [14:0] tmp_6_fu_791_p4;
wire   [15:0] grp_fu_809_p0;
wire   [12:0] grp_fu_809_p1;
wire   [7:0] grp_fu_817_p0;
wire   [11:0] grp_fu_817_p1;
wire   [14:0] grp_fu_824_p0;
wire   [14:0] grp_fu_824_p1;
wire   [15:0] grp_fu_831_p0;
wire   [15:0] grp_fu_831_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire   [28:0] grp_fu_809_p00;
wire   [19:0] grp_fu_817_p00;
wire   [29:0] grp_fu_824_p00;
wire   [29:0] grp_fu_824_p10;
wire   [42:0] mul_ln1246_fu_772_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

sigmoid_top_ROM_EXP_V #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
ROM_EXP_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ROM_EXP_V_address0),
    .ce0(ROM_EXP_V_ce0),
    .q0(ROM_EXP_V_q0)
);

sigmoid_top_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_187_p0),
    .din1(64'd4612530443357519872),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_187_p2)
);

sigmoid_top_mul_17s_32ns_43_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 43 ))
mul_17s_32ns_43_1_1_U2(
    .din0(ret_V_1_reg_961),
    .din1(mul_ln1246_fu_772_p1),
    .dout(mul_ln1246_fu_772_p2)
);

sigmoid_top_mul_mul_16ns_13ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
mul_mul_16ns_13ns_29_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_809_p0),
    .din1(grp_fu_809_p1),
    .ce(1'b1),
    .dout(grp_fu_809_p2)
);

sigmoid_top_mul_mul_8ns_12ns_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
mul_mul_8ns_12ns_20_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_817_p0),
    .din1(grp_fu_817_p1),
    .ce(1'b1),
    .dout(grp_fu_817_p2)
);

sigmoid_top_mul_mul_15ns_15ns_30_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
mul_mul_15ns_15ns_30_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_824_p0),
    .din1(grp_fu_824_p1),
    .ce(1'b1),
    .dout(grp_fu_824_p2)
);

sigmoid_top_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_831_p0),
    .din1(grp_fu_831_p1),
    .ce(1'b1),
    .dout(grp_fu_831_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln961_reg_855 <= add_ln961_fu_344_p2;
        icmp_ln1549_1_reg_875 <= icmp_ln1549_1_fu_376_p2;
        icmp_ln1549_reg_844 <= icmp_ln1549_fu_192_p2;
        icmp_ln961_reg_850 <= icmp_ln961_fu_338_p2;
        sub_ln962_reg_860 <= sub_ln962_fu_350_p2;
        tmp_1_reg_880 <= {{in_r[15:5]}};
        tmp_3_reg_885 <= {{in_r[15:3]}};
        tobool29_i_i647_reg_865 <= tobool29_i_i647_fu_356_p2;
        trunc_ln946_reg_870 <= trunc_ln946_fu_362_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1549_reg_844 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln1560_1_reg_905 <= icmp_ln1560_1_fu_525_p2;
        icmp_ln1560_reg_900 <= icmp_ln1560_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        n_reg_920 <= {{n_fu_657_p1[23:20]}};
        r_V_reg_915 <= grp_fu_809_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_V_6_reg_956 <= grp_fu_831_p2;
        ret_V_1_reg_961 <= ret_V_1_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        trunc_ln1352_reg_951[13 : 2] <= trunc_ln1352_fu_720_p1[13 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1549_reg_844 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        x0_V_4_reg_910[15 : 2] <= x0_V_4_fu_649_p3[15 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ROM_EXP_V_ce0 = 1'b1;
    end else begin
        ROM_EXP_V_ce0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ROM_EXP_V_address0 = zext_ln573_fu_679_p1;

assign a_fu_332_p2 = (p_Result_3_fu_326_p2 | and_ln949_fu_302_p2);

assign add_ln712_fu_590_p2 = (in_r + 16'd8192);

assign add_ln952_fu_308_p2 = ($signed(trunc_ln947_fu_230_p1) + $signed(16'd65483));

assign add_ln961_fu_344_p2 = ($signed(sub_ln947_fu_224_p2) + $signed(32'd4294967242));

assign add_ln968_fu_478_p2 = (sub_ln968_fu_473_p2 + select_ln946_fu_465_p3);

assign and_ln1549_1_fu_643_p2 = (xor_ln1560_fu_546_p2 & and_ln1549_fu_638_p2);

assign and_ln1549_fu_638_p2 = (xor_ln938_fu_632_p2 & icmp_ln1549_1_reg_875);

assign and_ln1560_fu_540_p2 = (or_ln1560_fu_536_p2 & grp_fu_187_p2);

assign and_ln712_1_fu_573_p3 = {{tmp_3_reg_885}, {2'd0}};

assign and_ln949_fu_302_p2 = (icmp_ln950_fu_282_p2 & icmp_ln949_fu_250_p2);

assign and_ln952_fu_320_p2 = (shl_ln952_fu_314_p2 & in_r);

assign and_ln_fu_552_p3 = {{tmp_1_reg_880}, {2'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = {{tmp_6_fu_791_p4}, {1'd0}};

assign exp_negx_V_fu_746_p4 = {{r_fu_740_p2[29:14]}};

assign grp_fu_187_p0 = p_Result_7_fu_492_p5;

assign grp_fu_809_p0 = grp_fu_809_p00;

assign grp_fu_809_p00 = in_r;

assign grp_fu_809_p1 = 29'd5909;

assign grp_fu_817_p0 = grp_fu_817_p00;

assign grp_fu_817_p00 = r_V_1_fu_666_p4;

assign grp_fu_817_p1 = 20'd2839;

assign grp_fu_824_p0 = grp_fu_824_p00;

assign grp_fu_824_p00 = ret_V_fu_702_p2;

assign grp_fu_824_p1 = grp_fu_824_p10;

assign grp_fu_824_p10 = ROM_EXP_V_q0;

assign grp_fu_831_p0 = zext_ln1352_fu_716_p1;

assign grp_fu_831_p1 = zext_ln1352_fu_716_p1;

assign icmp_ln1549_1_fu_376_p2 = ((tmp_9_fu_366_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln1549_fu_192_p2 = ((in_r > 16'd20479) ? 1'b1 : 1'b0);

assign icmp_ln1560_1_fu_525_p2 = ((trunc_ln3_fu_509_p4 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1560_fu_519_p2 = ((add_ln968_fu_478_p2 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln938_fu_531_p2 = ((in_r == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln949_fu_250_p2 = (($signed(tmp_5_fu_240_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln950_fu_282_p2 = ((p_Result_2_fu_276_p2 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln961_fu_338_p2 = (($signed(lsb_index_fu_234_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);


always @ (p_Result_6_fu_208_p3) begin
    if (p_Result_6_fu_208_p3[0] == 1'b1) begin
        l_fu_216_p3 = 32'd0;
    end else if (p_Result_6_fu_208_p3[1] == 1'b1) begin
        l_fu_216_p3 = 32'd1;
    end else if (p_Result_6_fu_208_p3[2] == 1'b1) begin
        l_fu_216_p3 = 32'd2;
    end else if (p_Result_6_fu_208_p3[3] == 1'b1) begin
        l_fu_216_p3 = 32'd3;
    end else if (p_Result_6_fu_208_p3[4] == 1'b1) begin
        l_fu_216_p3 = 32'd4;
    end else if (p_Result_6_fu_208_p3[5] == 1'b1) begin
        l_fu_216_p3 = 32'd5;
    end else if (p_Result_6_fu_208_p3[6] == 1'b1) begin
        l_fu_216_p3 = 32'd6;
    end else if (p_Result_6_fu_208_p3[7] == 1'b1) begin
        l_fu_216_p3 = 32'd7;
    end else if (p_Result_6_fu_208_p3[8] == 1'b1) begin
        l_fu_216_p3 = 32'd8;
    end else if (p_Result_6_fu_208_p3[9] == 1'b1) begin
        l_fu_216_p3 = 32'd9;
    end else if (p_Result_6_fu_208_p3[10] == 1'b1) begin
        l_fu_216_p3 = 32'd10;
    end else if (p_Result_6_fu_208_p3[11] == 1'b1) begin
        l_fu_216_p3 = 32'd11;
    end else if (p_Result_6_fu_208_p3[12] == 1'b1) begin
        l_fu_216_p3 = 32'd12;
    end else if (p_Result_6_fu_208_p3[13] == 1'b1) begin
        l_fu_216_p3 = 32'd13;
    end else if (p_Result_6_fu_208_p3[14] == 1'b1) begin
        l_fu_216_p3 = 32'd14;
    end else if (p_Result_6_fu_208_p3[15] == 1'b1) begin
        l_fu_216_p3 = 32'd15;
    end else if (p_Result_6_fu_208_p3[16] == 1'b1) begin
        l_fu_216_p3 = 32'd16;
    end else if (p_Result_6_fu_208_p3[17] == 1'b1) begin
        l_fu_216_p3 = 32'd17;
    end else if (p_Result_6_fu_208_p3[18] == 1'b1) begin
        l_fu_216_p3 = 32'd18;
    end else if (p_Result_6_fu_208_p3[19] == 1'b1) begin
        l_fu_216_p3 = 32'd19;
    end else if (p_Result_6_fu_208_p3[20] == 1'b1) begin
        l_fu_216_p3 = 32'd20;
    end else if (p_Result_6_fu_208_p3[21] == 1'b1) begin
        l_fu_216_p3 = 32'd21;
    end else if (p_Result_6_fu_208_p3[22] == 1'b1) begin
        l_fu_216_p3 = 32'd22;
    end else if (p_Result_6_fu_208_p3[23] == 1'b1) begin
        l_fu_216_p3 = 32'd23;
    end else if (p_Result_6_fu_208_p3[24] == 1'b1) begin
        l_fu_216_p3 = 32'd24;
    end else if (p_Result_6_fu_208_p3[25] == 1'b1) begin
        l_fu_216_p3 = 32'd25;
    end else if (p_Result_6_fu_208_p3[26] == 1'b1) begin
        l_fu_216_p3 = 32'd26;
    end else if (p_Result_6_fu_208_p3[27] == 1'b1) begin
        l_fu_216_p3 = 32'd27;
    end else if (p_Result_6_fu_208_p3[28] == 1'b1) begin
        l_fu_216_p3 = 32'd28;
    end else if (p_Result_6_fu_208_p3[29] == 1'b1) begin
        l_fu_216_p3 = 32'd29;
    end else if (p_Result_6_fu_208_p3[30] == 1'b1) begin
        l_fu_216_p3 = 32'd30;
    end else if (p_Result_6_fu_208_p3[31] == 1'b1) begin
        l_fu_216_p3 = 32'd31;
    end else begin
        l_fu_216_p3 = 32'd32;
    end
end

assign lhs_V_fu_778_p3 = {{trunc_ln1352_reg_951}, {29'd0}};

assign lsb_index_fu_234_p2 = ($signed(sub_ln947_fu_224_p2) + $signed(32'd4294967243));

assign lshr_ln950_fu_270_p2 = 16'd65535 >> zext_ln950_fu_266_p1;

assign lshr_ln961_fu_412_p2 = zext_ln960_fu_406_p1 >> zext_ln961_fu_409_p1;

assign m_1_fu_437_p2 = (m_fu_427_p3 + zext_ln964_fu_434_p1);

assign m_4_fu_724_p4 = {{r_V_reg_915[27:24]}};

assign m_5_fu_443_p4 = {{m_1_fu_437_p2[63:1]}};

assign m_fu_427_p3 = ((icmp_ln961_reg_850[0:0] == 1'b1) ? lshr_ln961_fu_412_p2 : shl_ln962_fu_421_p2);

assign mul_ln1246_fu_772_p1 = mul_ln1246_fu_772_p10;

assign mul_ln1246_fu_772_p10 = r_V_6_reg_956;

assign n_fu_657_p1 = grp_fu_809_p2;

assign or_ln1560_1_fu_618_p2 = (xor_ln1560_fu_546_p2 | or_ln938_fu_613_p2);

assign or_ln1560_fu_536_p2 = (icmp_ln1560_reg_900 | icmp_ln1560_1_reg_905);

assign or_ln938_fu_613_p2 = (icmp_ln938_fu_531_p2 | icmp_ln1549_reg_844);

assign p_Result_2_fu_276_p2 = (lshr_ln950_fu_270_p2 & in_r);

assign p_Result_3_fu_326_p2 = ((and_ln952_fu_320_p2 != 16'd0) ? 1'b1 : 1'b0);

assign p_Result_4_fu_457_p3 = m_1_fu_437_p2[32'd54];

assign p_Result_6_fu_208_p3 = {{16'd65535}, {p_Result_s_fu_198_p4}};

assign p_Result_7_fu_492_p5 = {{tmp_fu_484_p3}, {zext_ln965_fu_453_p1[51:0]}};

integer ap_tvar_int_0;

always @ (in_r) begin
    for (ap_tvar_int_0 = 16 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 15 - 0) begin
            p_Result_s_fu_198_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_198_p4[ap_tvar_int_0] = in_r[15 - ap_tvar_int_0];
        end
    end
end

assign r_V_1_fu_666_p1 = grp_fu_809_p2;

assign r_V_1_fu_666_p4 = {{r_V_1_fu_666_p1[19:12]}};

assign r_fu_740_p2 = zext_ln1168_3_fu_733_p1 >> zext_ln1386_fu_736_p1;

assign ret_V_1_fu_760_p2 = ($signed(sext_ln1245_fu_756_p1) + $signed(17'd16384));

assign ret_V_2_fu_785_p2 = (lhs_V_fu_778_p3 - mul_ln1246_fu_772_p2);

assign ret_V_fu_702_p2 = ($signed(15'd16384) - $signed(zext_ln1246_fu_698_p1));

assign select_ln946_fu_465_p3 = ((p_Result_4_fu_457_p3[0:0] == 1'b1) ? 11'd1023 : 11'd1022);

assign sext_ln1245_fu_756_p1 = $signed(exp_negx_V_fu_746_p4);

assign shl_ln952_fu_314_p2 = 16'd1 << add_ln952_fu_308_p2;

assign shl_ln962_fu_421_p2 = zext_ln960_fu_406_p1 << zext_ln962_fu_418_p1;

assign sub_ln947_fu_224_p2 = (32'd16 - l_fu_216_p3);

assign sub_ln950_fu_260_p2 = (5'd6 - trunc_ln950_fu_256_p1);

assign sub_ln962_fu_350_p2 = (32'd54 - sub_ln947_fu_224_p2);

assign sub_ln968_fu_473_p2 = (11'd4 - trunc_ln946_reg_870);

assign tmp_4_fu_595_p4 = {{add_ln712_fu_590_p2[15:2]}};

assign tmp_5_fu_240_p4 = {{lsb_index_fu_234_p2[31:1]}};

assign tmp_6_fu_791_p4 = {{ret_V_2_fu_785_p2[42:28]}};

assign tmp_7_fu_288_p3 = lsb_index_fu_234_p2[32'd31];

assign tmp_9_fu_366_p4 = {{in_r[15:12]}};

assign tmp_fu_484_p3 = {{1'd0}, {add_ln968_fu_478_p2}};

assign tobool29_i_i647_fu_356_p2 = (xor_ln952_fu_296_p2 & a_fu_332_p2);

assign trunc_ln1352_fu_720_p1 = x0_V_6_fu_683_p3[13:0];

assign trunc_ln3_fu_509_p4 = {{m_1_fu_437_p2[52:1]}};

assign trunc_ln4_fu_689_p1 = grp_fu_817_p2;

assign trunc_ln4_fu_689_p4 = {{trunc_ln4_fu_689_p1[19:10]}};

assign trunc_ln946_fu_362_p1 = l_fu_216_p3[10:0];

assign trunc_ln947_fu_230_p1 = sub_ln947_fu_224_p2[15:0];

assign trunc_ln950_fu_256_p1 = sub_ln947_fu_224_p2[4:0];

assign x0_V_1_fu_584_p2 = (zext_ln712_1_fu_580_p1 + 16'd10240);

assign x0_V_2_fu_605_p3 = {{tmp_4_fu_595_p4}, {2'd0}};

assign x0_V_3_fu_624_p3 = ((or_ln1560_1_fu_618_p2[0:0] == 1'b1) ? x0_V_2_fu_605_p3 : zext_ln5_fu_569_p1);

assign x0_V_4_fu_649_p3 = ((and_ln1549_1_fu_643_p2[0:0] == 1'b1) ? x0_V_1_fu_584_p2 : x0_V_3_fu_624_p3);

assign x0_V_6_fu_683_p3 = ((icmp_ln1549_reg_844[0:0] == 1'b1) ? 16'd16384 : x0_V_4_reg_910);

assign x0_V_fu_563_p2 = (zext_ln712_fu_559_p1 + 15'd13824);

assign xor_ln1560_fu_546_p2 = (1'd1 ^ and_ln1560_fu_540_p2);

assign xor_ln938_fu_632_p2 = (or_ln938_fu_613_p2 ^ 1'd1);

assign xor_ln952_fu_296_p2 = (tmp_7_fu_288_p3 ^ 1'd1);

assign zext_ln1168_3_fu_733_p1 = grp_fu_824_p2;

assign zext_ln1246_fu_698_p1 = trunc_ln4_fu_689_p4;

assign zext_ln1352_fu_716_p1 = x0_V_6_fu_683_p3;

assign zext_ln1386_fu_736_p1 = m_4_fu_724_p4;

assign zext_ln573_fu_679_p1 = n_reg_920;

assign zext_ln5_fu_569_p1 = x0_V_fu_563_p2;

assign zext_ln712_1_fu_580_p1 = and_ln712_1_fu_573_p3;

assign zext_ln712_fu_559_p1 = and_ln_fu_552_p3;

assign zext_ln950_fu_266_p1 = sub_ln950_fu_260_p2;

assign zext_ln960_fu_406_p1 = in_r;

assign zext_ln961_fu_409_p1 = add_ln961_reg_855;

assign zext_ln962_fu_418_p1 = sub_ln962_reg_860;

assign zext_ln964_fu_434_p1 = tobool29_i_i647_reg_865;

assign zext_ln965_fu_453_p1 = m_5_fu_443_p4;

always @ (posedge ap_clk) begin
    x0_V_4_reg_910[1:0] <= 2'b00;
    trunc_ln1352_reg_951[1:0] <= 2'b00;
end

endmodule //sigmoid_top
